A <- matrix(c(10,8,13,9,11,14),
nrow=6,
ncol=1,
byrow=TRUE)
A
B <- matrix(c(8,7,8,9,8,10),
nrow=6,
ncol=1,
byrow=TRUE)
B
transposedA = t(A)
transposedA%*%A
secondvar = transposedA%*%B
solve((firstvar%*%secondvar))
firstvar = transposedA%*%A
secondvar = transposedA%*%B
solve((firstvar%*%secondvar))
B
transposedA = t(A)
#Practice
A <- matrix(c(10,8,13,9,11,14),
nrow=5,
ncol=2,
byrow=TRUE)
#Practice
A <- matrix(c(10,8,13,9,11,14),
nrow=6,
ncol=2,
byrow=TRUE)
A
#Practice
A <- matrix(c(1,1,1,1,1,1,),(10,8,13,9,11,14),
nrow=6,
ncol=2,
byrow=TRUE)
#Practice
A <- matrix(c(1,1,1,1,1,1),(10,8,13,9,11,14),
nrow=6,
ncol=2,
byrow=TRUE)
#Practice
A <- matrix(c(1,1,1,1,1,1),c(10,8,13,9,11,14),
nrow=6,
ncol=2,
byrow=TRUE)
#Practice
A <- matrix(dimnames = list(c(1,1,1,1,1,1),c(10,8,13,9,11,14)),
nrow=6,
ncol=2,
byrow=TRUE)
#Practice
A <- matrix(cbind(c(1,1,1,1,1,1),c(10,8,13,9,11,14)),
nrow=6,
ncol=2,
byrow=TRUE)
A
#Practice
A1 = [1,1,1,1,1,1]
A2 = [10,8,13,9,11,14]
#Practice
A1 = (1,1,1,1,1,1)
#Practice
A1 = c(1,1,1,1,1,1)
A2 = c(10,8,13,9,11,14)
A <- matrix(cbind(c(A1),c(A2)),
nrow=6,
ncol=2,
byrow=TRUE)
A
A1
A <- matrix(cbind(A1),(A2)),
nrow=6,
ncol=2,
byrow=TRUE)
A <- matrix(cbind(c(A1),c(A2))),
nrow=6,
ncol=2,
byrow=TRUE)
#Practice
A1 = c(1,1,1,1,1,1)
A2 = c(10,8,13,9,11,14)
A <- matrix(cbind(c(A1),c(A2)),
nrow=6,
ncol=2,
byrow=TRUE)
A
#Practice
# A1 = c(1,1,1,1,1,1)
# A2 = c(10,8,13,9,11,14)
A <- matrix(c(1,1,1,1,1,1,10,8,13,9,11,14)),
nrow=6,
ncol=2,
byrow=TRUE)
#Practice
# A1 = c(1,1,1,1,1,1)
# A2 = c(10,8,13,9,11,14)
A <- matrix(c(1,1,1,1,1,1,10,8,13,9,11,14),
nrow=6,
ncol=2,
byrow=TRUE)
A
#Practice
# A1 = c(1,1,1,1,1,1)
# A2 = c(10,8,13,9,11,14)
A <- matrix(c(1,1,1,1,1,1,10,8,13,9,11,14),
nrow=6,
ncol=2,
)
A
B <- matrix(c(8,7,8,9,8,10),
nrow=6,
ncol=1,
byrow=TRUE)
B
transposedA = t(A)
firstvar = transposedA%*%A
secondvar = transposedA%*%B
solve((firstvar%*%secondvar))
solve(firstvar)
secondvar = transposedA%*%B
inversevar = solve(firstvar)
secondvar = transposedA%*%B
inversevar%*%secondvar
source('~/.active-rstudio-document')
source('~/Untitled.R')
#Practice
# A1 = c(1,1,1,1,1,1)
# A2 = c(10,8,13,9,11,14)
A <- matrix(c(1,1,1,1,1,1),c(10,8,13,9,11,14),
nrow=6,
ncol=2,
)
A
#Practice
# A1 = c(1,1,1,1,1,1)
# A2 = c(10,8,13,9,11,14)
A <- matrix(cbind((1,1,1,1,1,1),c(10,8,13,9,11,14)),
nrow=6,
ncol=2,
)
#Practice
# A1 = c(1,1,1,1,1,1)
# A2 = c(10,8,13,9,11,14)
A <- matrix(cbind(1,1,1,1,1,1),c(10,8,13,9,11,14),
nrow=6,
ncol=2,
)
A
#Practice
# A1 = c(1,1,1,1,1,1)
# A2 = c(10,8,13,9,11,14)
A <- matrix(c(1,1,1,1,1,1,10,8,13,9,11,14),
nrow=6,
ncol=2,
)
A
#Practice
# A1 = c(1,1,1,1,1,1)
A2 = c(10,8,13,9,11,14)
A2
# Let's import the CSV file
# Set the working directory first (different from yours)
# Set the working directory where your file is.
setwd("/Users/sgriffin/Documents/GitHub/MultivariateStats/")
# Now, read the file data into R
politics <- read.csv("political.csv")
# Let's import the CSV file
# Set the working directory first (different from yours)
# Set the working directory where your file is.
setwd("/Users/sgriffin/Documents/GitHub/MultivariateStats/Class 4/")
# Now, read the file data into R
politics <- read.csv("political.csv")
View(politics)
install.packages("mvnormtest")
library(mvnormtest)
politics_2 <- politics[c(2:9)]
politics_t <- t(politics_2)
politics_t <- t(politics[c(2:9)])
#Run the Shapiro-Wilk Test
mshapiro.test(politics_t)
install.packages("normwhn.test")
normality.test1(politics_2)
#OR another way
install.packages("dplyr")
install.packages("ggpubr")
library(dplyr)
library(ggpubr)
attach(politics_2)
ggdensity(politics_2$bush_rating)
ggdensity(obama_rating)
ggdensity(trump_rating)
ggdensity(politics_2$abortion)
ggdensity(politics_2$immigration)
ggdensity(politics_2$lgbtrights)
ggdensity(politics_2$deathpenalty)
ggdensity(politics_2$regulation)
library(ggpubr)
ggqqplot(politics_2$bush_rating)
ggqqplot(politics_2$obama_rating)
ggqqplot(politics_2$trump_rating)
ggqqplot(politics_2$abortion)
ggqqplot(politics_2$immigration)
ggqqplot(politics_2$lgbtrights)
ggqqplot(politics_2$deathpenalty)
ggqqplot(politics_2$regulation)
#run shapiro-wilks test for EACH variable.
shapiro.test(politics_2$bush_rating)
shapiro.test(politics_2$obama_rating)
shapiro.test(politics_2$trump_rating)
shapiro.test(politics_2$abortion)
shapiro.test(politics_2$immigration)
shapiro.test(politics_2$lgbtrights)
shapiro.test(politics_2$deathpenalty)
shapiro.test(politics_2$regulation)
#determinant of covariance and correlation matrices
pol_cov <- cov(politics_2)
pol_cor <- cor(politics_2)
det(pol_cov)
det(pol_cor)
install.packages("biotools")
boxM(politics[,-1],politics[,1])
#equality across group's covariance matrices
install.packages("biotools")
install.packages("biotools")
#equality across group's covariance matrices
install.packages("biotools")
library(biotools)
boxM(politics[,-1],politics[,1])
install.packages("biotools")
boxM(politics[,-1],politics[,1])
library(biotools)
#equality across group's covariance matrices
install.packages("biotools")
boxM(politics[,-1],politics[,1])
library(biotools)
install.packages("biotools")
library(biotools)
#equality across group's covariance matrices
install.packages("biotools")
#equality across group's covariance matrices
install.packages("biotools", dependencies = TRUE)
library(biotools)
boxM(politics[,-1],politics[,1])
View(pol_cor)
#Let's use the politics data again
# Set the working directory where your file is.
setwd("/Users/sgriffin/Documents//GitHub/MultivariateStats/Class 4/")
# Now, read the file data into R
politics <- read.csv("political.csv")
View(politics)
bush <- lm(bush_rating~abortion+immigration+lgbtrights+deathpenalty+regulation, politics)
summary(bush)
obama <- lm(obama_rating~abortion+immigration+lgbtrights+deathpenalty+regulation, data=politics)
summary(obama)
trump <- lm(trump_rating~abortion+immigration+lgbtrights+deathpenalty+regulation, politics)
summary(trump)
summary(bush)
bush
summary(bush)
bush <- lm(bush_rating~abortion+immigration+lgbtrights+deathpenalty+regulation, politics)
summary(bush)
#13 percent of the variation in the bush rating can be explained by the movements of variables
#f-test is testing for significan linear relationship
#p-value means significant linear relatinship
#higher f statistic, lower p value will be
#the more extreme the t values, the lower the p value
obama <- lm(obama_rating~abortion+immigration+lgbtrights+deathpenalty+regulation, data=politics)
summary(obama)
trump <- lm(trump_rating~abortion+immigration+lgbtrights+deathpenalty+regulation, politics)
summary(trump)
# and possibly looking for outliers
install.packages("car")
library(car)
#It may be more useful to just Run an outlier test
outlierTest(trump)
#Another useful outlier test is using a Q-Q plot of the residuals
qqPlot(trump, main="QQ Plot")
resid_trump <- resid(trump)
hist(resid_trump,
main="Distribution of Residuals")
# Test for Equal Variance
plot(trump)
# Evaluate linearity
# component + residual plot
crPlots(trump)
#independence
# Test for Autocorrelated Errors
durbinWatsonTest(trump)
View(politics)
resid_trump <- resid(trump)
hist(resid_trump,
main="Distribution of Residuals")
# Test for Equal Variance
plot(trump)
